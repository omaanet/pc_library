# Windsurf Rules

## 1. Application Stack

-   The application is built using:
    -   **Next.js 15**
    -   **TypeScript** (providing type safety and improved developer experience)
    -   **Tailwind CSS** (utility-first styling)
    -   **Shadcn UI** (component library based on Radix UI primitives)
-   The application uses **SQLite** as the database, stored in `db\books.db3`.
-   **Preferred Database Library:** `better-sqlite3` over `sqlite3`.
-   **Database Schema:** Located in `db\schema.sql`.
-   **Type Definitions:** Found in `src\types`.
-   **Mock Data:** Located in `src\lib\mock` (only if needed or requested and only in development environment).

## 2. General Code Style & Formatting

-   Use **PascalCase** for React component file names (e.g., `UserCard.tsx`, not `user-card.tsx`).
-   Prefer **named exports** for components.
-   Always declare the **type** of each variable and function (parameters and return values).
-   **Avoid using `any`** type.

## 3. Coding Pattern Preferences

-   Always prefer **simple solutions**.
-   **Avoid duplication** of code whenever possible by checking for existing similar code.
-   Only make changes that are requested or well understood and related to the change being requested.
-   When fixing an issue or bug:
    -   Do not introduce a new pattern or technology without first exhausting all options for the existing implementation.
    -   If a new pattern or technology is introduced, **remove the old implementation** to avoid duplicate logic.
-   Keep the codebase **clean and organized**.
-   **Never overwrite** the `.env` file without first asking and confirming.

## 4. Coding Workflow Preferences

-   **Focus on the areas of code relevant to the task**.
-   **Do not touch** unrelated code.
-   **Avoid major changes** to patterns and architecture unless explicitly instructed.
-   **Consider dependencies:** Think about what other methods and areas of code might be affected by changes.
-   **Imports & Exports**: Always verify imports and exports to ensure module dependencies are correctly managed and avoid unnecessary imports that could impact performance.
-   **Fast Refresh**: Respect Reactâ€™s Fast Refresh feature to enable smooth, state-preserving updates during development. Ensure all changes are compatible with this feature to maintain efficient debugging workflows.
-   **Project-wide Updates**: For any code update, check if it impacts other files within the project. If it does, list and inform the user of these affected files to help maintain coherence and minimize unexpected side effects.

## 5. Project Structure & Architecture

-   Follow **Next.js** patterns.
-   Correctly determine when to use **server vs. client components** in Next.js.
-   **Do not touch** unrelated code.

## 6. Functions & Logic

-   Keep functions **short and single-purpose** (<20 lines).
-   Avoid deeply nested blocks by:
    -   Using **early returns**.
    -   Extracting logic into **utility functions**.
-   Use **higher-order functions** (`map`, `filter`, `reduce`) to simplify logic.
-   Use **arrow functions** for simple cases (<3 instructions), named functions otherwise.
-   Use **default parameter values** instead of null/undefined checks.
-   Follow **RO-RO (Receive Object, Return Object)** for passing and returning multiple parameters.

## 7. Styling & UI

-   Use **Tailwind CSS** for styling.
-   Use **Shadcn UI** for components.

### GENERAL RULES

If you are not sure about something, STOP and ask the user.
If you need more information, STOP and ask the user.
If you deem a large change necessary, STOP, inform the user and ask for confirmation.
